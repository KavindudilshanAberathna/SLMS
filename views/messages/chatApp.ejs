<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
  <meta charset="UTF-8">
  <title>Chat ‚Ä¢ <%= user.fullName %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/emoji-picker-element/1.8.4/emoji-picker.min.css"/>
  <style>
    :root { --bg:#f0f2f5; --card:#fff; --text:#212529; --muted:#6c757d; --bubble-sent:#dcf8c6; --bubble-recv:#fff; --border:#e5e7eb; --shadow:0 6px 18px rgba(0,0,0,0.08);}
    [data-theme="dark"] { --bg:#0e1116; --card:#151a21; --text:#e5e7eb; --muted:#9aa4b2; --bubble-sent:#1f6feb; --bubble-recv:#1b2330; --border:#242b36; --shadow:0 6px 18px rgba(0,0,0,0.45);}
    body { background:var(--bg); color:var(--text); font-family:system-ui,-apple-system,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Apple Color Emoji","Segoe UI Emoji";}
    .app { max-width:1100px;margin:0 auto;height:100svh;padding:10px;display:grid;grid-template-columns:360px 1fr;gap:10px;}
    @media(max-width:992px){.app{grid-template-columns:1fr;}.pane-chat.hidden,.pane-list.hidden{display:none;}}
    .card-pane{background:var(--card);border:1px solid var(--border);border-radius:16px;box-shadow:var(--shadow);overflow:hidden;display:flex;flex-direction:column;}
    .list-header,.chat-header{padding:12px 14px;border-bottom:1px solid var(--border);display:flex;align-items:center;gap:10px;}
    .search{padding:8px 12px;margin:10px;border:1px solid var(--border);border-radius:12px;background:transparent;color:var(--text);}
    .chat-item{padding:12px;display:flex;gap:12px;align-items:center;cursor:pointer;border-bottom:1px solid var(--border);transition:transform 0.3s ease, opacity 0.3s ease;}
    .chat-item:hover{background:rgba(127,127,127,0.08);transform:translateY(-1px);}
    .avatar{width:48px;height:48px;border-radius:50%;object-fit:cover;}
    .name{font-weight:600;}
    .last{color:var(--muted);font-size:.9rem;}
    .dot{width:10px;height:10px;border-radius:50%;margin-left:6px;border:2px solid var(--card);}
    .online{background:#22c55e;}
    .offline{background:#6b7280;}
    .badge-unread{background:#ef4444;color:#fff;border-radius:999px;padding:2px 8px;font-size:.75rem;font-weight:600;}
    .chat-header .back{font-size:1.6rem;cursor:pointer;margin-right:6px;}
    .title{display:flex;align-items:center;gap:10px;}
    .title .meta{font-size:.85rem;color:var(--muted);}
    .messages{padding:14px;overflow-y:auto;height:calc(100% - 120px);background:var(--bg);}
    .msg{max-width:70%;padding:10px 14px;border-radius:16px;margin:6px 0;word-wrap:break-word;animation:fadeUp .18s ease-out;}
    .me{background:var(--bubble-sent);margin-left:auto;text-align:right;}
    .them{background:var(--bubble-recv);border:1px solid var(--border);}
    .time{display:block;margin-top:4px;font-size:.7rem;color:var(--muted);}
    .msg-status{font-size:.7rem;margin-left:6px;color:var(--muted);}
    .composer{border-top:1px solid var(--border);padding:10px;display:flex;gap:8px;align-items:center;background:var(--card);}
    .composer input{flex:1;border-radius:999px;border:1px solid var(--border);padding:10px 14px;background:transparent;color:var(--text);}
    .composer button{border-radius:999px;}
    .typing{padding:4px 14px;color:var(--muted);height:24px;}
    .float-new{position:absolute;bottom:16px;right:16px;z-index:5;}
    @keyframes fadeUp{from{opacity:0;transform:translateY(6px);}to{opacity:1;transform:translateY(0);}}
  </style>
</head>
<body>
<div class="app position-relative">
  <aside class="card-pane pane-list" id="paneList">
    <div class="list-header">
      <h5 class="mb-0 flex-grow-1">Chats</h5>
      <a href="javascript:history.back()" class="btn btn-warning btn-sm">‚¨Ö Back</a>
      <button id="themeBtn" class="btn btn-outline-secondary btn-sm">üåô</button>
      <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#newChatModal">New</button>
    </div>
    <input id="search" class="search" placeholder="Search people...">
    <div id="list" class="flex-grow-1 overflow-auto">
      <% chats.forEach(c => { if (c.partner) { %>
        <div class="chat-item" data-partner-id="<%= c.partnerId %>" data-name="<%= c.partner.fullName.toLowerCase() %>">
          <img class="avatar" src="<%= c.partner.profilePicture || '/default-avatar.png' %>">
          <div class="flex-grow-1">
            <div class="d-flex align-items-center justify-content-between">
              <div class="d-flex align-items-center">
                <span class="name"><%= c.partner.fullName %></span>
                <span class="dot <%= c.partner.online ? 'online' : 'offline' %>" id="dot-<%= c.partnerId %>"></span>
              </div>
            </div>
            <div class="last" id="last-<%= c.partnerId %>"><%= c.lastMessage %></div>
          </div>
        </div>
      <% }}); %>
    </div>
    <button class="btn btn-primary float-new d-lg-none" data-bs-toggle="modal" data-bs-target="#newChatModal">+</button>
  </aside>

  <section class="card-pane pane-chat" id="paneChat">
    <div class="chat-header">
      <span class="back d-lg-none" id="backBtn">‚Üê</span>
      <a href="/dashboard" class="btn btn-warning btn-sm ms-2 d-lg-none">‚¨Ö Back</a>
      <img id="chatAvatar" class="avatar" src="/default-avatar.png">
      <div class="title">
        <div>
          <div id="chatName" class="fw-semibold">Select a chat</div>
          <div id="chatMeta" class="meta">‚Äî</div>
        </div>
      </div>
    </div>
    <div id="typing" class="typing"></div>
    <div id="messages" class="messages"></div>
    <form id="composer" class="composer">
      <button class="btn btn-light" type="button" id="emojiBtn">üòä</button>
      <input id="input" type="text" placeholder="Type a message..." autocomplete="off">
      <button class="btn btn-primary" type="submit">Send</button>
    </form>
    <emoji-picker id="emojiPicker" style="position:absolute; bottom:80px; right:12px; display:none; z-index:1000;"></emoji-picker>
  </section>
</div>

<div class="modal fade" id="newChatModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="newChatForm">
        <div class="modal-header">
          <h5 class="modal-title">Start a new chat</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <select id="newChatUser" class="form-select" required>
            <option value="">Select user...</option>
            <% allUsers.forEach(u => { %>
              <option value="<%= u._id %>"><%= u.fullName %> (<%= u.role %>)</option>
            <% }) %>
          </select>
        </div>
        <div class="modal-footer">
          <button class="btn btn-success" type="submit">Open</button>
          <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Close</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script type="module" src="https://cdnjs.cloudflare.com/ajax/libs/emoji-picker-element/1.8.4/emoji-picker.min.js"></script>
<script>
const me = "<%= user._id %>";
const socket = io();
socket.emit('registerUser', me);

const themeBtn = document.getElementById('themeBtn');
const rootHtml = document.documentElement;
const savedTheme = localStorage.getItem('theme') || 'light';
rootHtml.setAttribute('data-theme', savedTheme);
themeBtn.textContent = savedTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
themeBtn.addEventListener('click', () => {
  const now = rootHtml.getAttribute('data-theme')==='dark'?'light':'dark';
  rootHtml.setAttribute('data-theme', now);
  localStorage.setItem('theme', now);
  themeBtn.textContent = now==='dark'?'‚òÄÔ∏è':'üåô';
});

const paneList = document.getElementById('paneList');
const paneChat = document.getElementById('paneChat');
const backBtn  = document.getElementById('backBtn');
const listEl = document.getElementById('list');
const messagesEl = document.getElementById('messages');
const typingEl   = document.getElementById('typing');
const inputEl    = document.getElementById('input');
const composerEl = document.getElementById('composer');
const emojiBtn   = document.getElementById('emojiBtn');
const emojiPicker= document.getElementById('emojiPicker');
const chatNameEl = document.getElementById('chatName');
const chatMetaEl = document.getElementById('chatMeta');
const chatAvatar = document.getElementById('chatAvatar');

let currentPartner = null;

backBtn.addEventListener('click',()=>{paneChat.classList.add('hidden');paneList.classList.remove('hidden');});

search.addEventListener('input',()=>{
  const q = search.value.trim().toLowerCase();
  document.querySelectorAll('.chat-item').forEach(it=>{
    it.style.display = it.dataset.name.includes(q) ? '' : 'none';
  });
});

function clearMessages(){messagesEl.innerHTML='';}
function scrollBottom(){messagesEl.scrollTop=messagesEl.scrollHeight;}
function appendMessage(m){
  const div=document.createElement('div');
  const mine=String(m.sender)===String(me);
  div.className='msg '+(mine?'me':'them');
  const t=new Date(m.createdAt||m.sentAt||Date.now());
  div.innerHTML=`
    ${escapeHtml(m.content)}
    <span class="time">${t.toLocaleTimeString()}</span>
    ${mine?`<span class="msg-status" data-id="${m.tempId||''}">${m.status||''}</span>`:''}
  `;
  messagesEl.appendChild(div);
}

listEl.querySelectorAll('.chat-item').forEach(item=>{item.addEventListener('click',()=>openChat(item.dataset.partnerId,item));});

async function openChat(partnerId,itemNode){
  currentPartner=partnerId;
  if(window.innerWidth<992){paneList.classList.add('hidden');paneChat.classList.remove('hidden');}
  chatAvatar.src=itemNode.querySelector('.avatar').src;
  chatNameEl.textContent=itemNode.querySelector('.name').textContent;
  clearMessages();
  const hist=await fetch('/messages/api/history',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({partnerId})}).then(r=>r.json());
  if(hist.ok) hist.messages.forEach(m=>appendMessage(m));
  scrollBottom();
  await fetch('/messages/api/read',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({partnerId})});
  typingEl.textContent='';
  updateMeta(itemNode);
  socket.emit('markAsRead',{userId:me,partnerId});
}

function updateMeta(itemNode){
  const online = itemNode.querySelector('.dot').classList.contains('online');
  chatMetaEl.textContent = online ? 'Online' : 'Offline';
}

// NEW handleIncoming with animation & top move
function handleIncoming(msg){
  const isForChat = (String(msg.sender) === String(currentPartner) && String(msg.receiver) === String(me)) ||
                    (String(msg.sender) === String(me) && String(msg.receiver) === String(currentPartner));
  const partnerId = String(msg.sender) === String(me) ? String(msg.receiver) : String(msg.sender);
  const lastEl = document.getElementById('last-' + partnerId);
  if(lastEl) lastEl.textContent = msg.content;

  // Move chat item to top with animation
  const chatItem = document.querySelector(`.chat-item[data-partner-id="${partnerId}"]`);
  if(chatItem && chatItem.parentNode){
    chatItem.style.transition = 'transform 0.3s ease, opacity 0.3s ease';
    chatItem.style.transform = 'translateY(-20px)';
    chatItem.style.opacity = '0.5';
    setTimeout(()=>{
      chatItem.style.transform = '';
      chatItem.style.opacity = '';
      listEl.prepend(chatItem);
      if(currentPartner===partnerId) updateMeta(chatItem);
    }, 300);
  }

  if(isForChat) appendMessage(msg);
  scrollBottom();

  if(isForChat && String(msg.sender)!==String(me)){
    socket.emit('markAsRead',{userId:me,partnerId:currentPartner});
  }
}

socket.on('receiveMessage',handleIncoming);
socket.on('messageDelivered',({tempId})=>{
  const statusEl=document.querySelector(`.msg-status[data-id="${tempId}"]`);
  if(statusEl)statusEl.textContent='‚úì Delivered';
});
socket.on('messageSeen',({tempId})=>{
  const statusEl=document.querySelector(`.msg-status[data-id="${tempId}"]`);
  if(statusEl)statusEl.textContent='‚úì Seen';
});

composerEl.addEventListener('submit',async e=>{
  e.preventDefault();
  if(!currentPartner) return;
  const content=inputEl.value.trim();
  if(!content) return;
  const tempId='msg-'+Date.now();
  appendMessage({sender:me,receiver:currentPartner,content,createdAt:new Date().toISOString(),status:'Sending...',tempId});
  scrollBottom();
  inputEl.value='';
  socket.emit('stopTyping',{sender:me,receiver:currentPartner});
  const res=await fetch('/messages/api/send',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({receiver:currentPartner,content,tempId})});
  if(res.ok) socket.emit('messageDelivered',{tempId});
  socket.emit('markAsRead',{userId:me,partnerId:currentPartner});
});

inputEl.addEventListener('input',()=>{
  if(!currentPartner) return;
  socket.emit('typing',{sender:me,receiver:currentPartner});
  clearTimeout(window.typingTimer);
  window.typingTimer=setTimeout(()=>socket.emit('stopTyping',{sender:me,receiver:currentPartner}),1200);
});

socket.on('typing',({sender})=>{if(currentPartner && String(sender)===String(currentPartner)) typingEl.textContent='Typing...';});
socket.on('stopTyping',({sender})=>{if(currentPartner && String(sender)===String(currentPartner)) typingEl.textContent='';});

socket.on('userStatus',({id,online})=>{
  const dot=document.getElementById('dot-'+id);
  if(dot){dot.classList.toggle('online',!!online);dot.classList.toggle('offline',!online);}
  const chatItem = document.querySelector(`.chat-item[data-partner-id="${id}"]`);
  if(chatItem && currentPartner===id && !typingEl.textContent){
    chatMetaEl.textContent = online ? 'Online' : 'Offline';
  }
});

emojiBtn.addEventListener('click',()=>{emojiPicker.style.display=emojiPicker.style.display==='none'?'block':'none';});
emojiPicker.addEventListener('emoji-click',ev=>{inputEl.value+=ev.detail.unicode;inputEl.focus();});

document.getElementById('newChatForm').addEventListener('submit',e=>{
  e.preventDefault();
  const partnerId=document.getElementById('newChatUser').value;
  if(!partnerId) return;
  const partnerName=document.querySelector(`#newChatUser option[value="${partnerId}"]`).textContent;
  let existing=document.querySelector(`.chat-item[data-partner-id="${partnerId}"]`);
  if(!existing){
    const div=document.createElement('div');
    div.className='chat-item';
    div.dataset.partnerId=partnerId;
    div.dataset.name=partnerName.toLowerCase();
    div.innerHTML=`<img class="avatar" src="/default-avatar.png"><div class="flex-grow-1"><div class="d-flex align-items-center justify-content-between"><div class="d-flex align-items-center"><span class="name">${partnerName}</span><span class="dot offline" id="dot-${partnerId}"></span></div></div><div class="last" id="last-${partnerId}">‚Äî</div></div>`;
    listEl.prepend(div);
    existing=div;
    div.addEventListener('click',()=>openChat(partnerId,div));
  }
  openChat(partnerId,existing);
  bootstrap.Modal.getInstance(document.getElementById('newChatModal')).hide();
});

function escapeHtml(str){return String(str).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#039;');}
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
